stages:
  - checktab
  - scc
  - genLicense
  - checkLicense
  - build_TelinkIoTStudio
  - build_Andes
  - oss
  - plainPW_check
  - misspellChecking
  - sensitive_word_check


checktab:
  stage: checktab
  tags:
    - LINUX
  script: 
  - find ./ -path "./chip/B91" -prune -o -path "./chip/B92" -prune -o -path "./.git" -prune -o  -type f \( -name "*.c" -o -name "*.h" -o -name "*.s" -o -name "*.S" -o -name "*.link" \) -exec grep -l $'\t' {} + > checktabresult || true
  - >
    if [ -s checktabresult ]; then
        echo "Files containing tabs:"
        cat checktabresult
        exit 1
    else
        echo "No files with tabs found."
    fi
  artifacts:
    when: always
    paths:
    - checktabresult


scc:
  stage: scc 
  tags:
    - LINUX
  script:
    - echo "Enter scc stage"
    - scc | tee scc.txt
    - bash /usr/bin/scc_calc.sh
    - echo "The End SCC result:"
    - cat scc.txt
  artifacts:
    paths:
    - scc.txt
  when: always


genLicense:
  stage: genLicense
  tags:
    - LINUX
  before_script:
  script:
    - date
    - generat_license_list
    - date
  artifacts:
    paths:
    - "license_list_gen.txt"
    - "no_license_list_gen.txt"
    - "mismatch_license_file_gen.txt"
  when: always



checkLicense:
  variables:
    CODE_COMPILE_ARCH: 'EAGLE_ANDES'
    COV_PF_CATALOG: 'BLE'
  stage: checkLicense
  tags:
    - LINUX
  allow_failure: yes
  before_script:
  script:
    - date
    - check_license
    - generat_license_list # For no license files
    - date

  artifacts:
    paths:
    - "mismatch_license.txt"
    - "no_license*.txt"
    - "unknow_type_file.txt"
  when: always


build_TelinkIoTStudio:
  variables:
    ECLIPSE_PROJECT_PATH: './tl_2.4g_sdk/build/TL321X'
    ECLIPSE_PROJECT_NAME: 'TL_2.4G_SDK_321X'
    ECLIPSE_BUILD_TARGET: '2p4g_gen_fsk_demo'            #Use code is more convenient than MACRO when multiple targets
    #IDE: "TelinkIDE" #[build_all]
    #PROJECT: "B96"  #[build_all]
    #SKIP_MODULE: "feture_demo" #[build_all]
  stage: build_TelinkIoTStudio
  tags:
    - TELINKIDE_LINUX
  before_script:
  script:
    - date
    - echo "--------------- Will build Demo -----------------"
    - echo $ECLIPSE_PROJECT_PATH --- $ECLIPSE_PROJECT_NAME/$ECLIPSE_BUILD_TARGET
    #- compile_project_all_modules.sh $IDE $PROJECT #[build_all] This cmd can trigger build all targets in project configuration
    - $TELINK_IDE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import $ECLIPSE_PROJECT_PATH -cleanBuild $ECLIPSE_PROJECT_NAME/$ECLIPSE_BUILD_TARGET   #acl_connection_demo
    - $TELINK_IDE_BUILD  -data ${CI_PIPELINE_ID}_WS  -import $ECLIPSE_PROJECT_PATH -cleanBuild $ECLIPSE_PROJECT_NAME/2p4g_tpll_demo
    - date

  artifacts:
    paths:
    - "tl_2.4g_sdk/build/TL321X/**/*.lst"
    - "tl_2.4g_sdk/build/TL321X/**/*.bin"
  when: always


oss:
  tags:
    - OSS
  stage: oss
  script:
    - oss_checking .
  artifacts:
    paths:
    - scan_result
  when: manual      # Just check

plainPW_check:
  stage: plainPW_check
  tags:
    - LINUX 
  script:
    - echo "Enter Plain Password checking stage"
    - check_plain_weak_password | tee result.txt
    - ls -l result.txt
    - echo "Error List:"
    - cat result.txt
  artifacts:
    paths:
    - result.txt
  when: manual    # Just check, ignore fail
  
misspellChecking:
  stage: misspellChecking
  tags:
    - LINUX
  script:
    - echo "--------------- Begin ------------------------"
    - misspell-check
    - echo "---------------- End -----------------------"
  artifacts:
    when: on_failure
    paths:
    - misspell_result.txt
  when: manual    # Just check, ignore fail

sensitive_word_check:
  stage: sensitive_word_check 
  tags:
    - LINUX
  script:
    - grep -E "(esb|nrf|nordic|Shock[ ]*Burst)" . -inr
    - > 
      if [ $? == 0 ]; then
        exit 1
      fi
  when: manual  # Just check, ignore matches in lib files